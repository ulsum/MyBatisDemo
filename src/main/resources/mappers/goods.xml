<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">

    <!--开启了二级缓存
        eviction：缓存的清除策略，当缓存对象数量达到上限后，自动触发对应算法对缓存对象清除
            1.LRU – 最近最久未使用：移除最长时间不被使用的对象
                O1 O2 O3 O4 .. O512 （此行代表01到0512个魂村对象）
                14 99 83 1     893  （此行代表对象在多少秒前调用过）
            2.FIFO – 先进先出：按对象进入缓存的顺序来移除它们
            3.SOFT – 软引用：移除基于垃圾收集器状态和软引用规则的对象（不推荐）
            4.WEAK – 弱引用：更积极的移除基于垃圾收集器状态和弱引用规则的对象（不推荐）
        flushInterval：多长时间自动清空缓存，单位毫秒，600000 - 10分钟
        size：缓存存储上限，用于保存对象或者集合（1个集合也算1个对象），最多512个缓存对象
        readOnly：只读，当为true时，直接取内存对象本身，当为false时，取内存对象，并创建副本，返回副本
    -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"></cache>

    <!-- useCache="false"代表不放入缓存 -->
    <select id="selectAll" resultType="com.ulsum.mybatis.demo3.Goods" useCache="false">
        SELECT * FROM t_goods ORDER BY goods_id DESC LIMIT 10;
    </select>

    <!-- 单参数传递，使用parameterType指定参数的数据类型即可，SQL中#{value}提取参数 -->
    <select id="selectById" parameterType="Integer" resultType="com.ulsum.mybatis.demo3.Goods">
        SELECT * FROM t_goods WHERE goods_id = #{value};
    </select>

    <!-- 多参数传递时，使用parameterType指定Map接口，SQL中#{key}提取参数 -->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.ulsum.mybatis.demo3.Goods">
        SELECT * FROM t_goods
        WHERE
        current_price BETWEEN #{min} AND #{max}
        ORDER BY current_price
        LIMIT 0, #{limit};
    </select>

    <!--
        利用LinkedHashMap保存多表关联结果（HashMap对于查询出来的结果列可能是乱序的）
        MyBatis会将每一条记录包装为LinkedHashMap对象
        key是字段名  value是字段对应的值，字段类型根据表结构进行自动判断
        优点: 易于扩展，易于使用
        缺点: 太过灵活，无法进行编译时检查
     -->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        SELECT g.*, c.category_name
        FROM t_goods g, t_category c
        WHERE g.category_id = c.category_id;
    </select>

    <select id="selectGoodsDTO" resultMap="rmGoods">
        SELECT g.*, c.category_name
        FROM t_goods g, t_category c
        WHERE g.category_id = c.category_id;
    </select>
    <!-- 结果映射 -->
    <resultMap id="rmGoods" type="com.ulsum.mybatis.demo8.GoodsDTO">
        <!-- 设置主键字段与属性映射 -->
        <id property="goods.goodsId" column="goods_id"></id>
        <!-- 设置非主键字段与属性映射 -->
        <result property="goods.title" column="title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <result property="categoryName" column="category_name"></result>
    </resultMap>

    <select id="selectGoodsCategoryDTO" resultMap="rmGoodsCategory">
        SELECT g.*, c.*
        FROM t_goods g, t_category c
        WHERE g.category_id = c.category_id;
    </select>
    <!-- 结果映射 -->
    <resultMap id="rmGoodsCategory" type="com.ulsum.mybatis.demo9.GoodsDTO">
        <!-- 设置主键字段与属性映射 -->
        <id property="goods.goodsId" column="goods_id"></id>
        <!-- 设置非主键字段与属性映射 -->
        <!--设置非主键字段与属性映射-->
        <result property="goods.title" column="title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <result property="category.categoryId" column="category_id"></result>
        <result property="category.categoryName" column="category_name"></result>
        <result property="category.parentId" column="parent_id"></result>
        <result property="category.categoryLevel" column="category_level"></result>
        <result property="category.categoryOrder" column="category_order"></result>
    </resultMap>

    <!-- flushCache="true" 在SQL执行后强制清空缓存 -->
    <insert id="insert" parameterType="com.ulsum.mybatis.demo3.Goods" flushCache="true">
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES (#{title} , #{subTitle} , #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery},
        #{categoryId})
        <!-- 主键回填到对象中 -->
        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="update" parameterType="com.ulsum.mybatis.demo3.Goods">
        UPDATE t_goods
        SET
          title = #{title} ,
          sub_title = #{subTitle} ,
          original_cost = #{originalCost} ,
          current_price = #{currentPrice} ,
          discount = #{discount} ,
          is_free_delivery = #{isFreeDelivery} ,
          category_id = #{categoryId}
        WHERE
          goods_id = #{goodsId}
    </update>

    <delete id="delete" parameterType="Integer">
        DELETE FROM t_goods WHERE goods_id = #{value};
    </delete>

    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.ulsum.mybatis.demo3.Goods">
        SELECT * FROM t_goods
        <where>
            <if test="categoryId != null">
                and category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>

    <select id="selectOneToMany" resultMap="rmGoodsGoodsDetail">
        select * from t_goods limit 0,1
    </select>
    <!--
        resultMap可用于说明一对多或者多对一的映射逻辑
        id 是resultMap属性引用的标志
        type 指向One的实体(Goods)
    -->
    <resultMap id="rmGoodsGoodsDetail" type="com.ulsum.mybatis.demo15.GoodsGoodsDetailDTO">
        <!-- 映射goods对象的主键到goods_id字段 -->
        <id property="goods.goodsId" column="goods_id"></id>
        <result property="goods.title" column="title"></result>
        <result property="goods.subTitle" column="sub_title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <!--
            collection的含义是,在
            select * from t_goods limit 0,1 得到结果后,对所有Goods对象遍历得到goods_id字段值,
            并代入到goodsDetail命名空间的findByGoodsId的SQL中执行查询,
            将得到的"商品详情"goodsDetailList对象
        -->
        <collection property="goodsDetailList" select="goodsDetail.selectByGoodsId" column="goods_id"/>
    </resultMap>

    <select id="selectPage" resultType="com.ulsum.mybatis.demo3.Goods">
        SELECT * FROM t_goods WHERE current_price &lt; 1000
    </select>

    <!--INSERT INTO table-->
    <!--VALUES ("a" , "a1" , "a2"),("b" , "b1" , "b2"),(....)-->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.title},#{item.subTitle}, #{item.originalCost}, #{item.currentPrice}, #{item.discount}, #{item.isFreeDelivery}, #{item.categoryId})
        </foreach>
    </insert>

    <!--in (1901,1902)-->
    <delete id="batchDelete" parameterType="java.util.List">
        DELETE FROM t_goods WHERE goods_id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

</mapper>
